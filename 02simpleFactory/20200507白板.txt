
	设计模式
	
	设计就是把一种设想 通过合理的计划/形式表现出来
	
	设计的模板或方法
	某一些特定的环境，解决特定的问题
	
	思路 解决方案
	设计模式在设计的时候需要遵循一些原则(类设计 依赖关系)
	开闭原则
		扩展开放
		修改关闭
		先做一个设计 需求改了 尽量不要改源代码 可以扩展功能
	里氏变换原则
		必须保证父类的东西 子类仍然成立
		什么时候继承
		子类继承父类 可以继承功能 尽量不要重写
	依赖倒置原则
		高层不要依赖底层
		抽象不要依赖具体
		翻转过来
	单一职责原则
		一个类做一个类的事情
		不同的功能和职责拆开
	接口隔离原则
		将庞大的接口拆分开
		一种单一职责的体现
		单一职责注重细节  接口隔离更注重约束
	迪米特原则(最少知识原则)
		尽量与自己交流
		不要和陌生人说话
		两个对象没有必然联系 不要交流 通过第三方完成
	合成复用原则
		尽量使用组合关系
		之后再考虑继承关系
		装饰者模式--->使用对象的组合扩展


	简单工厂模式(不算是23种中的一个)

	23种设计模式
	
	创建型5
		单例模式
		工厂方法模式，抽象工厂模式，建造者模式，原型模式
	结构型7
		适配器，装饰者，代理模式(静态，动态)
		外观模式，桥接模式，组合模式，享元模式
	行为型11
		策略模式，模板(方法)模式，观察者，责任链
		迭代器模式，命令模式，备忘录模式
		状态模式，访问者模式，中介者模式，解析器模式


==============================================================================
简单工厂模式  不是一个标准的设计模式 但是在开发中非常的常用
	1.用来解决创建对象的问题
		工厂(像流水线一样的生产车间)
		可以通过工厂来创建对象
		从而隐藏真实对象的类型
		可以通过工厂来管理内部对象
		达到统一修改的目的
		IOC设计思想  控制反转
		对象的创建后赋值操作  DI
	2.原本使用对象是通过自己创建的方式来产生的
		new 对象		一个类自己像是一个小作坊 没有任何规则
		未来使用的时候就会很麻烦  没有规则 方法随意 用户用起来就很麻烦
		为了使用更加的规范(中间定义了一个规则)
		通常用来定义规则的-----接口,抽象类

		有了规则以后
		父类的引用  指向 具体子类的实现对象
		Barbecue barbecue = new HeGang();//鹤岗小串饭店
		barbecue.saleRouChuan();
		用父类引用调用属性/方法
		为什么用这个多态的写法效果
		统一规则  前面的部分是不用改变
		隐藏了具体代码的实现



	



	不但知道了接口(规则)，同时还暴露了具体的实现类
	按照之前的设计原则，违背了一个封装隔离的思想

	想要把用户和真实的店隔离开
	用户应该可以看见接口(规则),用户不应该知道是哪个具体类实现的

	按照这种封装隔离的思想
	具体的类包装起来
	中间设立一个单独的类----目的是为了帮用户创建具体类对象的(用户看不见)
	中间这个类就是我们所谓的Factory
	







