
	
	大话设计模式------策略模式(Strategy)

	设计模式学习的是思想
	前人总结出来的一套解决方案

	
	简单工厂模式
	常用设计模式23种
	创建型 5
		单例  工厂方法  抽象工厂	  (建造者  原型)
	结构型 7
		适配器  代理(静态 动态)  装饰者   (桥接 组合 外观 享元)
	行为型 11
		模板  观察者  责任链  策略
		(访问者 迭代器 解析器 中介者 状态 备忘录 命令)


	按照面向对象的思想
	实现一个小案例----基础上来思考有何不妥
	改变成设计模式的解决方案



	买课(购买课程 根据不同的身份 打折)
	
	课程多少钱11998
	身份是什么?
	身份判断  进行折扣的计算



	思考一下
        刚才的代码实现有没有哪里觉得不太好????
	可读性不好-----身份我们用int来表示了
		String好一点
		静态常量(变量值--final)
		枚举(对象)

	一个方法做了太多的事情
		又做了身份的判断	
		又做了每一种不同身份的计算
		计算暴露出来了
		代码都写在一起(逻辑很复杂 维护很难)
		最好将判断的逻辑和计算的核心拆开

	经过上述修改
	看似好一些了
	维护起来也方便  每一方法做一件事
	这样写真的就完美了么？？？
	如果有一百种计算方案呢
		每多一个方案
		需要多添加一个方法
		并且还需要多添加一个case分支

		添加----修改代码(代码压缩包拆开 添加新代码 打成新包)
	
	扩展性不好(违背了开闭原则)
	在不拆开代码包的情况下 可以多添加一种方案
	解决这种情况最好的方案就是-----策略模式

	策略模式如果从代码的结构上来分析
	将原有每一个单独计算的方法
	从类中拆出去  
	升级成为单独的类 中的单独方法(每一个方法独立)


	成功的实现了刚才的扩展
	在不用修改原有程序的基础上
	扩展了新的策略和执行


	策略模式未来就是解决这种
	流程固定 执行不同的情况











