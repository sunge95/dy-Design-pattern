

	简单工厂模式(严格意义上的设计模式)

	工厂方法模式


	简单工厂模式
	1.用来解决创建对象的问题
		工厂(像流水线一样的生产车间)
		可以通过工厂来创建对象
		从而隐藏真实对象的类型
		可以通过工厂来管理内部对象
		达到统一修改的目的
		IOC设计思想  控制反转
		对象的创建后赋值操作  DI
	2.原本使用对象是通过自己创建的方式来产生的
		new 对象		一个类自己像是一个小作坊 没有任何规则
		未来使用的时候就会很麻烦  没有规则 方法随意 用户用起来就很麻烦
		为了使用更加的规范(中间定义了一个规则)
		通常用来定义规则的-----接口,抽象类

		有了规则以后
		父类的引用  指向 具体子类的实现对象
		Barbecue barbecue = new HeGang();//鹤岗小串饭店
		barbecue.saleRouChuan();
		用父类引用调用属性/方法
		为什么用这个多态的写法效果
		统一规则  前面的部分是不用改变
		隐藏了具体代码的实现

		------------------------------------------------

	3.提出一个小问题???
		创建对象的过程
		如果有10个人  创建的都是鹤岗这个对象
		某一天鹤岗小串倒闭了  10个人的对象换成别的
		代码如果修改的时候 没有办法统一的修改
		
		暴露了具体子类是谁
		隐藏真实的子类对象

	4.利用简单工厂模式将对象的创建过程包装起来了
		一个方法  返回一个对象
		简单工厂的实现
		实现了这个方法的基础上  发现小问题
		方法中如果是写死的代码  当前的工厂就很不灵活
		工厂的方法上添加了参数
		可以让用户来进行选择
		创建哪一个类型的对象

		静态工厂		简单工厂模式的方法被static修饰了而已

	5.从结构上来看
		简单工厂模式
		只给用户暴露了  接口  工厂  参数(意味着 用户需要了解参数意义)
		添加了参数的同时  让工厂内部的判断多了许多

		接口(约束 定义规则)

		有一个工厂类
			有一个方法(目的是为了创建接口的某一个具体实现类对象)
			方法通常是静态的(调用方便)
			方法可能会有参数(为了创建的时候更加的灵活)


		好多个子类实现(具体要创建的对象)








